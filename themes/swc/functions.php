<?php
/**
 *
 * WARNING: Please do not edit this file in any way
 *
 * load the theme function files
 */

add_action( 'wp_enqueue_scripts', 'masonry_filtering_scripts' );
// Register some javascript files, because we love javascript files. Enqueue a couple as well 

function masonry_filtering_scripts() {
  wp_register_script( 'masonry', 'https://cdnjs.cloudflare.com/ajax/libs/masonry/3.3.2/masonry.pkgd.min.js', array('jquery'), true );
  wp_register_script( 'imagesloaded', 'https://cdnjs.cloudflare.com/ajax/libs/jquery.imagesloaded/3.2.0/imagesloaded.pkgd.min.js', array('masonry'), true );
  wp_register_script( 'isotope', 'https://cdnjs.cloudflare.com/ajax/libs/jquery.isotope/2.2.2/isotope.pkgd.min.js', array('imagesloaded'), true );
  // wp_register_script( 'lazyloading', get_stylesheet_directory_uri().'/js/jquery.lazyload.min.js', array('isotope'), true );
  wp_register_script( 'isotope-filtering', get_stylesheet_directory_uri().'/js/isotope-filtering.js', array('isotope'), true );

  
  wp_register_script( 'isotope-filtering-news', get_stylesheet_directory_uri().'/js/isotope-filtering-news.js', array('isotope'), true );
   wp_register_script( 'isotope-filtering-blog', get_stylesheet_directory_uri().'/js/isotope-filtering-blog.js', array('isotope'), true );
  
  if ( is_page_template( 'template-full-width-news.php') ) {
    wp_enqueue_script('isotope-filtering-news');
  }
  
  if ( is_page_template( 'template-full-width-blog.php') ) {
    wp_enqueue_script('isotope-filtering-blog');
  }
  
  if ( is_page_template( 'category.php', 'archive.php', 'author.php' ) ) {
    wp_enqueue_script('isotope-filtering');
  }
  
}


add_action( 'admin_init', 'posts_order' );

function posts_order() 
{
    add_post_type_support( 'post', 'page-attributes' );
}

 add_filter (  'theme_page_templates' ,  'baw_theme_page_templates'  ) ; 
function  baw_theme_page_templates (  $pages_templates  ) 
{ 
	unset (  $pages_templates [ 'template-blog-excerpt.php' ]  ) ; 
	unset (  $pages_templates [ 'template-blog.php' ]  ) ; 
	unset (  $pages_templates [ 'template-contact.php' ]  ) ; 
	unset (  $pages_templates [ 'template-homepage.php' ]  ) ; 
	unset (  $pages_templates [ 'template-landing.php' ]  ) ; 
	unset (  $pages_templates [ 'template-portfolio.php' ]  ) ; 
	unset (  $pages_templates [ 'template-right-sidebar-half.php' ]  ) ; 
	unset (  $pages_templates [ 'template-right-sidebar.php' ]  ) ; 
	unset (  $pages_templates [ 'sidebar-contact.php' ]  ) ; 
	unset (  $pages_templates [ 'sidebar-content-page.php' ]  ) ; 
	unset (  $pages_templates [ 'sidebar-content-half-page.php' ]  ) ; 
	unset (  $pages_templates [ 'sidebar-half-left.php' ]  ) ; 
	unset (  $pages_templates [ 'sidebar-left-half.php' ]  ) ; 
	unset (  $pages_templates [ 'sidebar-left.php' ]  ) ; 
	unset (  $pages_templates [ 'sidebar-right-half.php' ]  ) ; 
	unset (  $pages_templates [ 'sidebar-right.php' ]  ) ; 
	unset (  $pages_templates [ 'single-portfolio.php' ]  ) ; 
	unset (  $pages_templates [ 'sidebar.php' ]  ) ;  
	unset (  $pages_templates [ 'page-meta.php' ]  ) ;
	unset (  $pages_templates [ 'page.php' ]  ) ;
	unset (  $pages_templates [ 'sitemap.php' ]  ) ;
	return  $pages_templates ; 
}

function register_my_menus() {
     register_nav_menus(
       array(  
       	'footer-menu-1' => __( 'Footer Menu 1' )
         )
     ); 
     
     register_nav_menus(
       array(  
       	'footer-menu-3' => __( 'Footer Menu 3' )
         )
     ); 
     
     register_nav_menus(
       array(  
       	'footer-menu-4' => __( 'Footer Menu 4' )
         )
     ); 
     
     register_nav_menus(
       array(  
       	'footer-menu-5' => __( 'Footer Menu 5' )
         )
     ); 

 } 
 add_action( 'init', 'register_my_menus' );
 
 



function remove_some_widgets(){

	// Unregister some of the TwentyTen sidebars
unregister_sidebar( 'contact-widget' );
unregister_sidebar( 'main-sidebar' );
unregister_sidebar( 'right-sidebar' );
unregister_sidebar( 'left-sidebar' );
unregister_sidebar( 'left-sidebar' );
unregister_sidebar( 'left-sidebar-half' );
unregister_sidebar( 'right-sidebar-half' );
unregister_sidebar( 'sidebar-right' );
unregister_sidebar( 'sidebar-left' );
unregister_sidebar( 'home-widget-1' );
unregister_sidebar( 'home-widget-2' );
unregister_sidebar( 'home-widget-3' );
}

add_action( 'widgets_init', 'remove_some_widgets', 11 );

function new_widgets_init() {


register_sidebar(array(
        'name' => __('Right Sidebar'),
        'description' => __('Right Sidebar'),
        'id' => 'right-page-sidebar',
        'before_title' => '<div class="widget-title">',
        'after_title' => '</div>',
        'before_widget' => '',
        'after_widget' => ''
    ));

register_sidebar(array(
        'name' => __('Left Sidebar'),
        'description' => __('Left Sidebar'),
        'id' => 'left-page-sidebar',
        'before_title' => '<div class="widget-title">',
        'after_title' => '</div>',
        'before_widget' => '',
        'after_widget' => ''
    ));
    
    register_sidebar(array(
            'name' => __('Blog Callouts'),
            'description' => __('Sticky Blog Callout Bar'),
            'id' => 'blog-callouts',
            'before_title' => '',
            'after_title' => '',
            'before_widget' => '',
            'after_widget' => ''
        ));
        
        register_sidebar(array(
                'name' => __('Page Callouts'),
                'description' => __('Sticky Page Callout Bar'),
                'id' => 'page-callouts',
                'before_title' => '',
                'after_title' => '',
                'before_widget' => '',
                'after_widget' => ''
            ));
    
}
    add_action('widgets_init', 'new_widgets_init');
        
/**
 * Create custom post type for Events
 *
 */

function my_custom_post_event() {
  $labels = array(
    'name'               => _x( 'Events', 'post type general name' ),
    'singular_name'      => _x( 'Event', 'post type singular name' ),
    'add_new'            => _x( 'Add New', 'event' ),
    'add_new_item'       => __( 'Add New Event' ),
    'edit_item'          => __( 'Edit Event' ),
    'new_item'           => __( 'New Event' ),
    'all_items'          => __( 'All Events' ),
    'view_item'          => __( 'View Event' ),
    'search_items'       => __( 'Search Events' ),
    'not_found'          => __( 'No events found' ),
    'not_found_in_trash' => __( 'No events found in the Trash' ), 
    'parent_item_colon'  => '',
    'menu_name'          => 'Events'
  );
  $args = array(
    'labels'        => $labels,
    'description'   => 'Events Posts',
    'public'        => true,
    'menu_position' => 5,
    'hierarchical' => false,
    'query_var' => 'events',
    'supports'      => array( 'title', 'editor', 'thumbnail', 'excerpt', 'custom-fields' ),
    'taxonomies' => array( 'post_tag','events-categories'),
    'publicly_queryable' => true,
    'can_export' => true,
    'rewrite' => array('slug' => 'events','with_front' => false),
     'public' => true,
     'has_archive' => false,
     'capability_type' => 'post'
  );
  register_post_type( 'events', $args ); 
}
add_action( 'init', 'my_custom_post_event' );

// rewrites custom post type name
global $wp_rewrite;
$events_structure = '/events/%events%/';
$wp_rewrite->add_rewrite_tag("%events%", '([^/]+)', "event=");
$wp_rewrite->add_permastruct('events', $events_structure, false);


/**
 * Create custom post type for News - No category structure is used, just a base url rewrite
 *  */

function my_custom_post_news() {
  $labels = array(
    'name'               => _x( 'News Posts', 'post type general name' ),
    'singular_name'      => _x( 'News Post', 'post type singular name' ),
    'add_new'            => _x( 'Add ', 'news' ),
    'add_new_item'       => __( 'Add News Post' ),
    'edit_item'          => __( 'Edit News Post' ),
    'new_item'           => __( 'Create News Post' ),
    'all_items'          => __( 'All News Posts' ),
    'view_item'          => __( 'View News Post' ),
    'search_items'       => __( 'Search News Posts' ),
    'not_found'          => __( 'No News Posts Found' ),
    'not_found_in_trash' => __( 'No News Posts Found in the Trash' ), 
    'parent_item_colon'  => '',
    'menu_name'          => 'News'
  );
  $args = array(
    'labels'        => $labels,
    'description'   => 'News Posts',
    'public'        => false,
    'menu_position' => 5,
    'hierarchical' => false,
    'query_var' => 'news',
    'supports'      => array( 'title', 'editor', 'thumbnail', 'excerpt', 'custom-fields' ),
    'taxonomies' => array( 'post_tag','events-categories'),
    'publicly_queryable' => true,
    'can_export' => true,
    'rewrite' => array('slug' => 'swc-technology-partners/news','with_front' => FALSE),
     'public' => true,
     'has_archive' => false,
     'capability_type' => 'post'
  );
  register_post_type( 'news', $args ); 
}
add_action( 'init', 'my_custom_post_news' );


            
        /*
         * Function creates post duplicate as a draft and redirects then to the edit post screen
         */
        function rd_duplicate_post_as_draft(){
        	global $wpdb;
        	if (! ( isset( $_GET['post']) || isset( $_POST['post'])  || ( isset($_REQUEST['action']) && 'rd_duplicate_post_as_draft' == $_REQUEST['action'] ) ) ) {
        		wp_die('No post to duplicate has been supplied!');
        	}
         
        	/*
        	 * get the original post id
        	 */
        	$post_id = (isset($_GET['post']) ? $_GET['post'] : $_POST['post']);
        	/*
        	 * and all the original post data then
        	 */
        	$post = get_post( $post_id );
         
        	/*
        	 * if you don't want current user to be the new post author,
        	 * then change next couple of lines to this: $new_post_author = $post->post_author;
        	 */
        	$current_user = wp_get_current_user();
        	$new_post_author = $current_user->ID;
         
        	/*
        	 * if post data exists, create the post duplicate
        	 */
        	if (isset( $post ) && $post != null) {
         
        		/*
        		 * new post data array
        		 */
        		$args = array(
        			'comment_status' => $post->comment_status,
        			'ping_status'    => $post->ping_status,
        			'post_author'    => $new_post_author,
        			'post_content'   => $post->post_content,
        			'post_excerpt'   => $post->post_excerpt,
        			'post_name'      => $post->post_name,
        			'post_parent'    => $post->post_parent,
        			'post_password'  => $post->post_password,
        			'post_status'    => 'draft',
        			'post_title'     => $post->post_title,
        			'post_type'      => $post->post_type,
        			'to_ping'        => $post->to_ping,
        			'menu_order'     => $post->menu_order
        		);
         
        		/*
        		 * insert the post by wp_insert_post() function
        		 */
        		$new_post_id = wp_insert_post( $args );
         
        		/*
        		 * get all current post terms ad set them to the new post draft
        		 */
        		$taxonomies = get_object_taxonomies($post->post_type); // returns array of taxonomy names for post type, ex array("category", "post_tag");
        		foreach ($taxonomies as $taxonomy) {
        			$post_terms = wp_get_object_terms($post_id, $taxonomy, array('fields' => 'slugs'));
        			wp_set_object_terms($new_post_id, $post_terms, $taxonomy, false);
        		}
         
        		/*
        		 * duplicate all post meta
        		 */
        		$post_meta_infos = $wpdb->get_results("SELECT meta_key, meta_value FROM $wpdb->postmeta WHERE post_id=$post_id");
        		if (count($post_meta_infos)!=0) {
        			$sql_query = "INSERT INTO $wpdb->postmeta (post_id, meta_key, meta_value) ";
        			foreach ($post_meta_infos as $meta_info) {
        				$meta_key = $meta_info->meta_key;
        				$meta_value = addslashes($meta_info->meta_value);
        				$sql_query_sel[]= "SELECT $new_post_id, '$meta_key', '$meta_value'";
        			}
        			$sql_query.= implode(" UNION ALL ", $sql_query_sel);
        			$wpdb->query($sql_query);
        		}
         
         
        		/*
        		 * finally, redirect to the edit post screen for the new draft
        		 */
        		wp_redirect( admin_url( 'post.php?action=edit&post=' . $new_post_id ) );
        		exit;
        	} else {
        		wp_die('Post creation failed, could not find original post: ' . $post_id);
        	}
        }
        add_action( 'admin_action_rd_duplicate_post_as_draft', 'rd_duplicate_post_as_draft' );
         
        /*
         * Add the duplicate link to action list for post_row_actions
         */
        function rd_duplicate_post_link( $actions, $post ) {
        	if (current_user_can('edit_posts')) {
        		$actions['duplicate'] = '<a href="admin.php?action=rd_duplicate_post_as_draft&amp;post=' . $post->ID . '" title="Duplicate this item" rel="permalink">Duplicate</a>';
        	}
        	return $actions;
        }
         
       add_filter( 'post_row_actions', 'rd_duplicate_post_link', 10, 2 );
        
       
       /* CUSTOM EXCERPT FOR EVENTS PAGE LISTING */
       
       function custom_excerpt($new_length = 20, $new_more = '...') {
         add_filter('excerpt_length', function () use ($new_length) {
           return $new_length;
         }, 999);
         add_filter('excerpt_more', function () use ($new_more) {
           return $new_more;
         });
         $output = get_the_excerpt();
         $output = apply_filters('wptexturize', $output);
         $output = apply_filters('convert_chars', $output);
         $output = '<p>' . $output . '</p>';
         echo $output;
       }
       
       
       add_action( 'init', 'my_add_excerpts_to_pages' );
       function my_add_excerpts_to_pages() {
            add_post_type_support( 'page', 'excerpt' );
       }
       

// Add custom rewrite rules to handle things like years in custom post archives
function add_rewrite_rules($aRules) {
    $aNewRules = array(
        'swc-technology-partners/news/([0-9]{4})/page/?([0-9]{1,})/?$' => 'index.php?post_type=news&year=$matches[1]&paged=$matches[2]',
        'swc-technology-partners/news/([0-9]{4})/?$' => 'index.php?post_type=news&year=$matches[1]',
    );
    $aRules = $aNewRules + $aRules;
    return $aRules;
}

// hook add_rewrite_rules function into rewrite_rules_array
add_filter('rewrite_rules_array', 'add_rewrite_rules');



// ADD CATEGORY CLASS TO SINGLE BLOG POST BODY
add_filter('body_class','add_category_to_single');
function add_category_to_single($classes, $class) {
	if (is_single() ) {
		global $post;
		foreach((get_the_category($post->ID)) as $category) {
			// add category slug to the $classes array
			$classes[] = $category->category_nicename;
		}
	}
	// return the $classes array
	return $classes;
}

// SHORTCODE FOR DISPLAY POSTS SHORTCODE

/**
 * To Customize, use the following filters:
 *
 * `shortcode_atts_display-posts`
 * For customizing the default shortode arguments
 * 
 * `display_posts_shortcode_args`
 * For customizing the $args passed to WP_Query
 *
 * `display_posts_shortcode_output`
 * For customizing the output of individual posts.
 * Example: https://gist.github.com/1175575#file_display_posts_shortcode_output.php
 *
 * `display_posts_shortcode_wrapper_open` 
 * display_posts_shortcode_wrapper_close`
 * For customizing the outer markup of the whole listing. By default it is a <ul> but
 * can be changed to <ol> or <div> using the 'wrapper' attribute, or by using this filter.
 * Example: https://gist.github.com/1270278
 */ 
 
// Create the shortcode
add_shortcode( 'display-posts', 'be_display_posts_shortcode' );
function be_display_posts_shortcode( $atts ) {

	// Original Attributes, for filters
	$original_atts = $atts;

	// Pull in shortcode attributes and set defaults
	$atts = shortcode_atts( array(
		'title'              => '',
		'author'              => '',
		'category'            => '',
		'category_display'    => '',
	//	'category_label'      => 'Posted in: ',
		'date_format'         => '(M d, Y)',
		'date'                => '',
		'date_column'         => 'post_date',
		'date_compare'        => '=',
		'date_query_before'   => '',
		'date_query_after'    => '',
		'date_query_column'   => '',
		'date_query_compare'  => '',
		'display_posts_off'   => false,
		'exclude_current'     => false,
		'id'                  => false,
		'ignore_sticky_posts' => false,
		'image_size'          => false,
		'include_title'       => true,
		'include_author'      => false,
		'include_content'     => false,
		'include_date'        => true,
		'include_excerpt'     => true,
		'meta_key'            => '',
		'meta_value'          => '',
		'no_posts_message'    => '',
		'offset'              => 0,
		'order'               => 'DESC',
		'orderby'             => 'date',
		'post_parent'         => false,
		'post_status'         => 'publish',
		'post_type'           => 'post',
		'posts_per_page'      => '1',
		'tag'                 => '',
		'tax_operator'        => 'IN',
		'tax_term'            => false,
		'taxonomy'            => false,
		'time'                => '',
		'wrapper'             => false,
		'wrapper_class'       => false,
		'wrapper_id'          => false,
	), $atts, 'display-posts' );
	
	// End early if shortcode should be turned off
	if( $atts['display_posts_off'] )
		return;

	$shortcode_title     = sanitize_text_field( $atts['title'] );
	$author              = sanitize_text_field( $atts['author'] );
	$category            = sanitize_text_field( $atts['category'] );
	$category_display    = 'true' == $atts['category_display'] ? 'category' : sanitize_text_field( $atts['category_display'] );
	$category_label      = sanitize_text_field( $atts['category_label'] );
	$date_format         = sanitize_text_field( $atts['date_format'] );
	$date                = sanitize_text_field( $atts['date'] );
	$date_column         = sanitize_text_field( $atts['date_column'] );
	$date_compare        = sanitize_text_field( $atts['date_compare'] );
	$date_query_before   = sanitize_text_field( $atts['date_query_before'] );
	$date_query_after    = sanitize_text_field( $atts['date_query_after'] );
	$date_query_column   = sanitize_text_field( $atts['date_query_column'] );
	$date_query_compare  = sanitize_text_field( $atts['date_query_compare'] );
	$exclude_current     = filter_var( $atts['exclude_current'], FILTER_VALIDATE_BOOLEAN );
	$id                  = $atts['id']; // Sanitized later as an array of integers
	$ignore_sticky_posts = filter_var( $atts['ignore_sticky_posts'], FILTER_VALIDATE_BOOLEAN );
	$image_size          = sanitize_key( $atts['image_size'] );
	$include_title       = filter_var( $atts['include_title'], FILTER_VALIDATE_BOOLEAN );
	$include_author      = filter_var( $atts['include_author'], FILTER_VALIDATE_BOOLEAN );
	$include_content     = filter_var( $atts['include_content'], FILTER_VALIDATE_BOOLEAN );
	$include_date        = filter_var( $atts['include_date'], FILTER_VALIDATE_BOOLEAN );
	$include_excerpt     = filter_var( $atts['include_excerpt'], FILTER_VALIDATE_BOOLEAN );
	$meta_key            = sanitize_text_field( $atts['meta_key'] );
	$meta_value          = sanitize_text_field( $atts['meta_value'] );
	$no_posts_message    = sanitize_text_field( $atts['no_posts_message'] );
	$offset              = intval( $atts['offset'] );
	$order               = sanitize_key( $atts['order'] );
	$orderby             = sanitize_key( $atts['orderby'] );
	$post_parent         = $atts['post_parent']; // Validated later, after check for 'current'
	$post_status         = $atts['post_status']; // Validated later as one of a few values
	$post_type           = sanitize_text_field( $atts['post_type'] );
	$posts_per_page      = intval( $atts['posts_per_page'] );
	$tag                 = sanitize_text_field( $atts['tag'] );
	$tax_operator        = $atts['tax_operator']; // Validated later as one of a few values
	$tax_term            = sanitize_text_field( $atts['tax_term'] );
	$taxonomy            = sanitize_key( $atts['taxonomy'] );
	$time                = sanitize_text_field( $atts['time'] );
	$wrapper             = sanitize_text_field( $atts['wrapper'] );
	$wrapper_class       = sanitize_html_class( $atts['wrapper_class'] );

	if( !empty( $wrapper_class ) )
		$wrapper_class = ' class="' . $wrapper_class . '"';
	$wrapper_id = sanitize_html_class( $atts['wrapper_id'] );
	if( !empty( $wrapper_id ) )
		$wrapper_id = ' id="' . $wrapper_id . '"';
		
	// Set up initial query for post
	$args = array(
		'category_name'       => $category,
		'order'               => $order,
		'orderby'             => $orderby,
		'post_type'           => explode( ',', $post_type ),
		'posts_per_page'      => $posts_per_page,
		'tag'                 => $tag,
	);

	// Date query.
	if ( ! empty( $date ) || ! empty( $time ) || ! empty( $date_query_after ) || ! empty( $date_query_before ) ) {
		$initial_date_query = $date_query_top_lvl = array();

		$valid_date_columns = array(
			'post_date', 'post_date_gmt', 'post_modified', 'post_modified_gmt',
			'comment_date', 'comment_date_gmt'
		);

		$valid_compare_ops = array( '=', '!=', '>', '>=', '<', '<=', 'IN', 'NOT IN', 'BETWEEN', 'NOT BETWEEN' );

		// Sanitize and add date segments.
		$dates = be_sanitize_date_time( $date );
		if ( ! empty( $dates ) ) {
			if ( is_string( $dates ) ) {
				$timestamp = strtotime( $dates );
				$dates = array(
					'year'   => date( 'Y', $timestamp ),
					'month'  => date( 'm', $timestamp ),
					'day'    => date( 'd', $timestamp ),
				);
			}
			foreach ( $dates as $arg => $segment ) {
				$initial_date_query[ $arg ] = $segment;
			}
		}

		// Sanitize and add time segments.
		$times = be_sanitize_date_time( $time, 'time' );
		if ( ! empty( $times ) ) {
			foreach ( $times as $arg => $segment ) {
				$initial_date_query[ $arg ] = $segment;
			}
		}

		// Date query 'before' argument.
		$before = be_sanitize_date_time( $date_query_before, 'date', true );
		if ( ! empty( $before ) ) {
			$initial_date_query['before'] = $before;
		}

		// Date query 'after' argument.
		$after = be_sanitize_date_time( $date_query_after, 'date', true );
		if ( ! empty( $after ) ) {
			$initial_date_query['after'] = $after;
		}

		// Date query 'column' argument.
		if ( ! empty( $date_query_column ) && in_array( $date_query_column, $valid_date_columns ) ) {
			$initial_date_query['column'] = $date_query_column;
		}

		// Date query 'compare' argument.
		if ( ! empty( $date_query_compare ) && in_array( $date_query_compare, $valid_compare_ops ) ) {
			$initial_date_query['compare'] = $date_query_compare;
		}

		//
		// Top-level date_query arguments. Only valid arguments will be added.
		//

		// 'column' argument.
		if ( ! empty( $date_column ) && in_array( $date_column, $valid_date_columns ) ) {
			$date_query_top_lvl['column'] = $date_column;
		}

		// 'compare' argument.
		if ( ! empty( $date_compare ) && in_array( $date_compare, $valid_compare_ops ) ) {
			$date_query_top_lvl['compare'] = $date_compare;
		}

		// Bring in the initial date query.
		if ( ! empty( $initial_date_query ) ) {
			$date_query_top_lvl[] = $initial_date_query;
		}

		// Date queries.
		$args['date_query'] = $date_query_top_lvl;
	}

	// Ignore Sticky Posts
	if( $ignore_sticky_posts )
		$args['ignore_sticky_posts'] = true;
	
	// Meta key (for ordering)
	if( !empty( $meta_key ) )
		$args['meta_key'] = $meta_key;
	
	// Meta value (for simple meta queries)
	if( !empty( $meta_value ) )
		$args['meta_value'] = $meta_value;
		
	// If Post IDs
	if( $id ) {
		$posts_in = array_map( 'intval', explode( ',', $id ) );
		$args['post__in'] = $posts_in;
	}
	
	// If Exclude Current
	if( is_singular() && $exclude_current )
		$args['post__not_in'] = array( get_the_ID() );
	
	// Post Author
	if( !empty( $author ) )
		$args['author_name'] = $author;
		
	// Offset
	if( !empty( $offset ) )
		$args['offset'] = $offset;
	
	// Post Status	
	$post_status = explode( ', ', $post_status );		
	$validated = array();
	$available = array( 'publish', 'pending', 'draft', 'auto-draft', 'future', 'private', 'inherit', 'trash', 'any' );
	foreach ( $post_status as $unvalidated )
		if ( in_array( $unvalidated, $available ) )
			$validated[] = $unvalidated;
	if( !empty( $validated ) )		
		$args['post_status'] = $validated;
	
	
	// If taxonomy attributes, create a taxonomy query
	if ( !empty( $taxonomy ) && !empty( $tax_term ) ) {
	
		if( 'current' == $tax_term ) {
			global $post;
			$terms = wp_get_post_terms(get_the_ID(), $taxonomy);
			$tax_term = array();
			foreach ($terms as $term) {
				$tax_term[] = $term->slug;
			}
		}else{
			// Term string to array
			$tax_term = explode( ', ', $tax_term );
		}
		
		// Validate operator
		if( !in_array( $tax_operator, array( 'IN', 'NOT IN', 'AND' ) ) )
			$tax_operator = 'IN';
					
		$tax_args = array(
			'tax_query' => array(
				array(
					'taxonomy' => $taxonomy,
					'field'    => 'slug',
					'terms'    => $tax_term,
					'operator' => $tax_operator
				)
			)
		);
		
		// Check for multiple taxonomy queries
		$count = 2;
		$more_tax_queries = false;
		while( 
			isset( $original_atts['taxonomy_' . $count] ) && !empty( $original_atts['taxonomy_' . $count] ) && 
			isset( $original_atts['tax_' . $count . '_term'] ) && !empty( $original_atts['tax_' . $count . '_term'] ) 
		):
		
			// Sanitize values
			$more_tax_queries = true;
			$taxonomy = sanitize_key( $original_atts['taxonomy_' . $count] );
	 		$terms = explode( ', ', sanitize_text_field( $original_atts['tax_' . $count . '_term'] ) );
	 		$tax_operator = isset( $original_atts['tax_' . $count . '_operator'] ) ? $original_atts['tax_' . $count . '_operator'] : 'IN';
	 		$tax_operator = in_array( $tax_operator, array( 'IN', 'NOT IN', 'AND' ) ) ? $tax_operator : 'IN';
	 		
	 		$tax_args['tax_query'][] = array(
	 			'taxonomy' => $taxonomy,
	 			'field' => 'slug',
	 			'terms' => $terms,
	 			'operator' => $tax_operator
	 		);
	
			$count++;
			
		endwhile;
		
		if( $more_tax_queries ):
			$tax_relation = 'AND';
			if( isset( $original_atts['tax_relation'] ) && in_array( $original_atts['tax_relation'], array( 'AND', 'OR' ) ) )
				$tax_relation = $original_atts['tax_relation'];
			$args['tax_query']['relation'] = $tax_relation;
		endif;
		
		$args = array_merge( $args, $tax_args );
	}
	
	// If post parent attribute, set up parent
	if( $post_parent !== false ) {
		if( 'current' == $post_parent ) {
			global $post;
			$post_parent = get_the_ID();
		}
		$args['post_parent'] = intval( $post_parent );
	}
	
	// Set up html elements used to wrap the posts. 
	// Default is ul/li, but can also be ol/li and div/div
	$wrapper_options = array( 'ul', 'ol', 'div' );
	if( ! in_array( $wrapper, $wrapper_options ) )
		$wrapper = 'div';
	$inner_wrapper = 'div' == $wrapper ? 'div' : 'li';

	/**
	 * Filter the arguments passed to WP_Query.
	 *
	 * @since 1.7
	 *
	 * @param array $args          Parsed arguments to pass to WP_Query.
	 * @param array $original_atts Original attributes passed to the shortcode.
	 */
	$listing = new WP_Query( apply_filters( 'display_posts_shortcode_args', $args, $original_atts ) );
	if ( ! $listing->have_posts() ) {
		/**
		 * Filter content to display if no posts match the current query.
		 *
		 * @since 1.8
		 *
		 * @param string $no_posts_message Content to display, returned via {@see wpautop()}.
		 */
		return apply_filters( 'display_posts_shortcode_no_results', wpautop( $no_posts_message ) );
	}
		
	$inner = '';
	while ( $listing->have_posts() ): $listing->the_post(); global $post;
		
		$image = $date = $author = $excerpt = $content = '';
		
		if ( $include_title ) {
			/** This filter is documented in wp-includes/link-template.php */
			$title = '<a class="title" href="' . apply_filters( 'the_permalink', get_permalink() ) . '">' . get_the_title() . '</a>';
		}

		if ( $image_size && has_post_thumbnail() )  
			$image = '<a class="image" href="' . get_permalink() . '">' . get_the_post_thumbnail( get_the_ID(), $image_size ) . '</a> ';
			
		if ( $include_date ) 
			$date = ' <span class="date">' . get_the_date( $date_format ) . '</span>';
			
		if( $include_author )
			/**
			 * Filter the HTML markup to display author information for the current post.
			 *
			 * @since Unknown
			 *
			 * @param string $author_output HTML markup to display author information.
			 */
			$author = apply_filters( 'display_posts_shortcode_author', ' <span class="author">by ' . get_the_author() . '</span>' );
		
		if ( $include_excerpt ) 
			$excerpt = ' <p class="excerpt">' . get_the_excerpt() . '</p>';
			
		if( $include_content ) {
			add_filter( 'shortcode_atts_display-posts', 'be_display_posts_off', 10, 3 );
			/** This filter is documented in wp-includes/post-template.php */
			$content = '<div class="content">' . apply_filters( 'the_content', get_the_content() ) . '</div>';
			remove_filter( 'shortcode_atts_display-posts', 'be_display_posts_off', 10, 3 );
		}
		
		// Display categories the post is in
		$category_display_text = '';
		if( $category_display && is_object_in_taxonomy( get_post_type(), $category_display ) ) {
			$terms = get_the_terms( get_the_ID(), $category_display );
			$term_output = array();
			foreach( $terms as $term )
				$term_output[] = '<a href="' . get_term_link( $term, $category_display ) . '">' . $term->name . '</a>';
			$category_display_text = ' <span class="category-display"><span class="category-display-label">' . $category_label . '</span> ' . implode( ', ', $term_output ) . '</span>';

			/**
			 * Filter the list of categories attached to the current post.
			 *
			 * @since 2.4.2
			 *
			 * @param string   $category_display Current Category Display text
			 */
			$category_display_text = apply_filters( 'display_posts_shortcode_category_display', $category_display_text );
		
		// If they pass a taxonomy that doesn't exist on this post type	
		}elseif( $category_display ) {
			$category_display = '';
		}
		
		$class = array( 'listing-item' );

		/**
		 * Filter the post classes for the inner wrapper element of the current post.
		 *
		 * @since 2.2
		 *
		 * @param array    $class         Post classes.
		 * @param WP_Post  $post          Post object.
		 * @param WP_Query $listing       WP_Query object for the posts listing.
		 * @param array    $original_atts Original attributes passed to the shortcode.
		 */
		$class = array_map( 'sanitize_html_class', apply_filters( 'display_posts_shortcode_post_class', $class, $post, $listing, $original_atts ) );
		$output = '<' . $inner_wrapper . ' class="' . implode( ' ', $class ) . '">' . $image . $title . $date . $author . $category_display_text . $excerpt . $content . '</' . $inner_wrapper . '>';
		
		// If post is set to private, only show to logged in users
		if( 'private' == get_post_status( get_the_ID() ) && !current_user_can( 'read_private_posts' ) )
			$output = '';

		/**
		 * Filter the HTML markup for output via the shortcode.
		 *
		 * @since 0.1.5
		 *
		 * @param string $output        The shortcode's HTML output.
		 * @param array  $original_atts Original attributes passed to the shortcode.
		 * @param string $image         HTML markup for the post's featured image element.
		 * @param string $title         HTML markup for the post's title element.
		 * @param string $date          HTML markup for the post's date element.
		 * @param string $excerpt       HTML markup for the post's excerpt element.
		 * @param string $inner_wrapper Type of container to use for the post's inner wrapper element.
		 * @param string $content       The post's content.
		 * @param string $class         Space-separated list of post classes to supply to the $inner_wrapper element.
		 */
		$inner .= apply_filters( 'display_posts_shortcode_output', $output, $original_atts, $image, $title, $date, $excerpt, $inner_wrapper, $content, $class );
		
	endwhile; wp_reset_postdata();

	/**
	 * Filter the shortcode output's opening outer wrapper element.
	 *
	 * @since 1.7
	 *
	 * @param string $wrapper_open  HTML markup for the opening outer wrapper element.
	 * @param array  $original_atts Original attributes passed to the shortcode.
	 */
	$open = apply_filters( 'display_posts_shortcode_wrapper_open', '<' . $wrapper . $wrapper_class . $wrapper_id . '>', $original_atts );

	/**
	 * Filter the shortcode output's closing outer wrapper element.
	 *
	 * @since 1.7
	 *
	 * @param string $wrapper_close HTML markup for the closing outer wrapper element.
	 * @param array  $original_atts Original attributes passed to the shortcode.
	 */
	$close = apply_filters( 'display_posts_shortcode_wrapper_close', '</' . $wrapper . '>', $original_atts );
	
	$return = $open;

	if( $shortcode_title ) {

		/**
		 * Filter the shortcode output title tag element.
		 *
		 * @since 2.3
		 *
		 * @param string $tag           Type of element to use for the output title tag. Default 'h2'.
		 * @param array  $original_atts Original attributes passed to the shortcode.
		 */
		$title_tag = apply_filters( 'display_posts_shortcode_title_tag', 'h2', $original_atts );

		$return .= '<' . $title_tag . ' class="display-posts-title">' . $shortcode_title . '</' . $title_tag . '>' . "\n";
	}

	$return .= $inner . $close;

	return $return;
}

/**
 * Sanitize the segments of a given date or time for a date query.
 *
 * Accepts times entered in the 'HH:MM:SS' or 'HH:MM' formats, and dates
 * entered in the 'YYYY-MM-DD' format.
 *
 * @param string $date_time      Date or time string to sanitize the parts of.
 * @param string $type           Optional. Type of value to sanitize. Accepts
 *                               'date' or 'time'. Default 'date'.
 * @param bool   $accepts_string Optional. Whether the return value accepts a string.
 *                               Default false.
 * @return array|string Array of valid date or time segments, a timestamp, otherwise
 *                      an empty array.
 */
function be_sanitize_date_time( $date_time, $type = 'date', $accepts_string = false ) {
	if ( empty( $date_time ) || ! in_array( $type, array( 'date', 'time' ) ) ) {
		return array();
	}

	$segments = array();

	/*
	 * If $date_time is not a strictly-formatted date or time, attempt to salvage it with
	 * as strototime()-ready string. This is supported by the 'date', 'date_query_before',
	 * and 'date_query_after' attributes.
	 */
	if (
		true === $accepts_string
		&& ( false !== strpos( $date_time, ' ' ) || false === strpos( $date_time, '-' ) )
	) {
		if ( false !== $timestamp = strtotime( $date_time ) ) {
			return $date_time;
		}
	}

	$parts = array_map( 'absint', explode( 'date' == $type ? '-' : ':', $date_time ) );

	// Date.
	if ( 'date' == $type ) {
		// Defaults to 2001 for years, January for months, and 1 for days.
		$year = $month = $day = 1;

		if ( count( $parts >= 3 ) ) {
			list( $year, $month, $day ) = $parts;

			$year  = ( $year  >= 1 && $year  <= 9999 ) ? $year  : 1;
			$month = ( $month >= 1 && $month <= 12   ) ? $month : 1;
			$day   = ( $day   >= 1 && $day   <= 31   ) ? $day   : 1;
		}

		$segments = array(
			'year'  => $year,
			'month' => $month,
			'day'   => $day
		);

	// Time.
	} elseif ( 'time' == $type ) {
		// Defaults to 0 for all segments.
		$hour = $minute = $second = 0;

		switch( count( $parts ) ) {
			case 3 :
				list( $hour, $minute, $second ) = $parts;
				$hour   = ( $hour   >= 0 && $hour   <= 23 ) ? $hour   : 0;
				$minute = ( $minute >= 0 && $minute <= 60 ) ? $minute : 0;
				$second = ( $second >= 0 && $second <= 60 ) ? $second : 0;
				break;
			case 2 :
				list( $hour, $minute ) = $parts;
				$hour   = ( $hour   >= 0 && $hour   <= 23 ) ? $hour   : 0;
				$minute = ( $minute >= 0 && $minute <= 60 ) ? $minute : 0;
				break;
			default : break;
		}

		$segments = array(
			'hour'   => $hour,
			'minute' => $minute,
			'second' => $second
		);
	}

	/**
	 * Filter the sanitized segments for the given date or time string.
	 *
	 * @since 2.5
	 *
	 * @param array  $segments  Array of sanitized date or time segments, e.g. hour, minute, second,
	 *                          or year, month, day, depending on the value of the $type parameter.
	 * @param string $date_time Date or time string. Dates are formatted 'YYYY-MM-DD', and times are
	 *                          formatted 'HH:MM:SS' or 'HH:MM'.
	 * @param string $type      Type of string to sanitize. Can be either 'date' or 'time'.
	 */
	return apply_filters( 'display_posts_shortcode_sanitized_segments', $segments, $date_time, $type );
}

/**
 * Turn off display posts shortcode 
 * If display full post content, any uses of [display-posts] are disabled
 *
 * @param array $out, returned shortcode values 
 * @param array $pairs, list of supported attributes and their defaults 
 * @param array $atts, original shortcode attributes 
 * @return array $out
 */
function be_display_posts_off( $out, $pairs, $atts ) {
	/**
	 * Filter whether to disable the display-posts shortcode.
	 *
	 * The function and filter were added for backward-compatibility with
	 * 2.3 behavior in certain circumstances.
	 *
	 * @since 2.4
	 *
	 * @param bool $disable Whether to disable the display-posts shortcode. Default true.
	 */
	$out['display_posts_off'] = apply_filters( 'display_posts_shortcode_inception_override', true );
	return $out;
}





// NO RESULTS EVENT MESSAGE

add_filter( 'display_posts_shortcode_no_results', 'be_no_results' );
/**
 * Display Posts Shortcode - Display message if no results
 *
 * @author Bill Erickson
 * @link http://www.billerickson.net/code/display-posts-shortcode-no-results
 *
 * @param string $output, default is empty
 * @return string $output
 */
function be_no_results( $output ) {
	$output = '<div class="no-events"><p class="title">SWC Events</p><p>SWC hosts free Chicagoland educational events to help get business and IT leaders up to speed on Microsoft’s latest technology solutions, security, IT strategy and digital marketing. Ready to attend an SWC event?</p><a class="btn solid orange" href="/events">Register For Free</a></div>';
	return $output;
}



// INCLUDE CUSTOM FIELDS FOR EVENTS IN OUTPUT

/**
 * Add custom fields to Display Posts Shortcode
 * @author Bill Erickson
 * @link http://wordpress.org/extend/plugins/display-posts-shortcode/
 * @link http://www.billerickson.net/shortcode-to-display-posts/comment-page-1/#comment-4565
 *
 * @param $output string, the original markup for an individual post
 * @param $atts array, all the attributes passed to the shortcode
 * @param $image string, the image part of the output
 * @param $title string, the title part of the output
 * @param $date string, the date part of the output
 * @param $excerpt string, the excerpt part of the output
 * @return $output string, the modified markup for an individual post
 */
 
add_filter( 'display_posts_shortcode_output', 'be_display_posts_custom_fields', 10, 6 );
function be_display_posts_custom_fields( $output, $atts, $image, $title, $date, $excerpt, $content ) {
	// Get our custom fields
	global $post;
	$event_date = esc_attr( get_post_meta( $post->ID, 'event_date', true ) );
	$start_time = esc_attr( get_post_meta( $post->ID, 'start_time', true ) );
	$end_time = esc_attr( get_post_meta( $post->ID, 'end_time', true ) );
	$location_title = esc_attr( get_post_meta( $post->ID, 'location_title', true ) );
	$location_address = esc_attr( get_post_meta( $post->ID, 'location_address', true ) );
	$date = esc_attr( get_post_meta( $post->ID, 'event_date', true ) );
	$date2 = date("F j, Y", strtotime($date));
	
	
	// If there's a value for the custom field, let's wrap them with <span>'s so you can control them with CSS
	if( isset( $event_date ) ) $event_date = '<p class="event-date">'. $date2 .' from </p> ';
	if( isset( $start_time ) ) $start_time = '<p class="event-time">' . $start_time . ' - ' .$end_time . '</p> ';
	// if( isset( $end_time ) ) $end_time = '<p class="end-time">' . $end_time . '</p> ';
	if( isset( $location_title ) ) $location_title = '<p class="location-title">' . $location_title . ' @ <span class="location-address">' . $location_address . '</span></p> ';
	// if( isset( $location_address ) ) $location_address = '<p class="location-address">' . $location_address . '</p> ';
	$register_button = '<a class="btn solid orange" href="' . apply_filters( 'the_permalink', get_permalink() ) . '">' . 'Register Now' . '</a>';
	
	// Now let's rebuild the output. 
	$output = '<div class="events-widget">' . $title . $event_date . $start_time . $location_title . $excerpt . $register_button . '</div>';
	// Finally we'll return the modified output
	return $output;
}

   
?>